#:kivy 1.9.0

TestGame:

<TestGame>:
	gameworld: gameworld
    canvas.before:
        Color:
            rgb: (1., 1., 1.)
        Rectangle:
            size: self.size
            pos: self.pos
    GameWorld:
        id: gameworld
        gamescreenmanager: gamescreenmanager
        size_of_gameworld: 600*1024
        size_of_entity_block: 128
        system_count: 8
        zones: {'general': 600*1024}
        model_format_allocations: {'vertex_format_2f4ub': (200*1024, 200*1024)}
        PositionSystem2D:
            system_id: 'position'
            gameworld: gameworld
            zones: ['general']
            size_of_component_block: 512
        PolyRenderer:
            gameworld: gameworld
            zones: ['general']
            frame_count: 1
            updateable: True
            #size_of_batches: 786
            #max_batches: 400
            #size_of_component_block: 786
            shader_source: 'poscolorshader.glsl'
    GameScreenManager:
        id: gamescreenmanager
        size: root.size
        pos: root.pos
        gameworld: gameworld
        GameScreen:
        	name: 'main'
            BoxLayout:
                id: button_tray
                orientation: 'vertical'
                size_hint: (.15, .8)
                pos_hint: {'y': .1}
                ToggleButton:
                    text: 'Layered Circle'
                    on_state: root.draw_shape_callback('layered_circle_model') if self.state == 'down' else root.stop_drawing()
                    group: 'shape_buttons'
                ToggleButton:
                    text: 'Rectangle'
                    on_state: root.draw_shape_callback('rectangle_model') if self.state == 'down' else root.stop_drawing()
                    group: 'shape_buttons'
                ToggleButton:
                    text: 'Triangle'
                    on_state: root.draw_shape_callback('triangle_model') if self.state == 'down' else root.stop_drawing()
                    group: 'shape_buttons'
                ToggleButton:
                    text: 'Circle'
                    on_state: root.draw_shape_callback('circle_model') if self.state == 'down' else root.stop_drawing()
                    group: 'shape_buttons'
                Button:
                    text: 'Clear'
                    on_release: root.clear()
